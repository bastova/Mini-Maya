#include "myglwidget.h"

#include "../glm/ext.hpp"
#include "../glm/gtc/matrix_transform.hpp"
#include "MyUnitCube.h"
#include "MyFFDGrid.h"
//using namespace std;

#ifndef M_PI
	#define M_PI 3.14159265358979323846
#endif
#define DEG2RAD (M_PI/180.0)

MyGLWidget::MyGLWidget(QWidget* parent) : QGLWidget(parent) {
	//This starter code uses a timer to make a square rotate without
	//user intervention.  You can remove this.
	//timer = new QTimer(this);
	//connect(timer, SIGNAL(timeout()), this, SLOT(updateGL()));
	//timer->start(17);

	//We can set our vertex attributes rather than requesting their locations
	//I chose to do so in this constructor, maybe you would in your init() function?
	positionLocation = 0;
	normalLocation = 1;
	colorLocation = 2;
	setFocusPolicy(Qt::StrongFocus);
	 myCube = new MyUnitCube();

	 //////////////////////Anton
	 this->ffdX = 2;
	 this->ffdY = 2;
	 this->ffdZ = 2;
	 this->ffd = nullptr;
	 this->drawFFD = false;
	 this->selected_points = *new vector<MyVertex*>();
	 this->multiple_point_selection = false;
	 this->valX = 0;
	 this->valY = 0;
	 this->valZ = 0;
	 ///////////////////////
}

MyGLWidget::~MyGLWidget() {
	//Release your resources, just like you'd delete pointers
	glDeleteBuffers(1, &vbo);
	glDeleteBuffers(1, &cbo);
	glDeleteBuffers(1, &nbo);
	glDeleteBuffers(1, &ibo);

	//Tear down the shader program in reverse of building it
	glDetachShader(shaderProgram, vertexShader);
	glDetachShader(shaderProgram, fragmentShader);
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);
	glDeleteProgram(shaderProgram);
	
}

//this is the function i referred to as "init" in my lecture - Cory
void MyGLWidget::initializeGL() {
	this->setMouseTracking(true);
	ex=0;
	ey=0;
	ez=0;
	mouseX=0.0;
	mouseY=0.0;
	Pw=glm::vec3(1.0,1.0,1.0);
	model = glm::mat4(1.0);
	 camera = new MyCamera();
	//Initialize GLEW to get access to latest OpenGL support on your computer
	//GLEW 1.7.0 supplied with this starter code, it's always a good idea to update
	//about once every year or so as OpenGL is updated
	GLenum err = glewInit();
	if (GLEW_OK != err)
	{
		cerr << "GLEW is not initialized!";
	}

	//Create the VBOs and IBO we'll be using to render images in OpenGL
	glGenBuffers(1, &vbo);
	glGenBuffers(1, &cbo);
	glGenBuffers(1, &nbo);
	glGenBuffers(1, &ibo);
	
	//Everybody does this
	glClearColor(0, 0, 0, 1);
	glEnable(GL_DEPTH_TEST);
	glClearDepth(1.0);
	glDepthFunc(GL_LEQUAL);

	//here is stuff for setting up our shaders
	const char* fragFile = "diffuseFrag.frag";
	const char* vertFile = "diffuseVert.vert";
	vertexShader = glCreateShader(GL_VERTEX_SHADER);
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	shaderProgram = glCreateProgram();
	
	//load up the source, compile and link the shader program
	const char* vertSource = textFileRead(vertFile);
	const char* fragSource = textFileRead(fragFile);
	glShaderSource(vertexShader, 1, &vertSource, 0);
	glShaderSource(fragmentShader, 1, &fragSource, 0);
	glCompileShader(vertexShader);
	glCompileShader(fragmentShader);

	//For your convenience, i decided to throw in some compiler/linker output helper functions
	//from CIS 565
	GLint compiled;
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &compiled);
	if (!compiled)
	{
		printShaderInfoLog(vertexShader);
	} 
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &compiled);
	if (!compiled)
	{
		printShaderInfoLog(fragmentShader);
	} 

	//set the attribute locations for our shaders
	glBindAttribLocation(shaderProgram, positionLocation, "vs_position");
	glBindAttribLocation(shaderProgram, normalLocation, "vs_normal");
	glBindAttribLocation(shaderProgram, colorLocation, "vs_color");

	//finish shader setup
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);

	//check for linking success
	GLint linked;
	glGetProgramiv(shaderProgram,GL_LINK_STATUS, &linked);
	if (!linked) 
	{
		printLinkInfoLog(shaderProgram);
	}

	//Get the uniform locations for our shaders, unfortunately they can not be set by us, we have
	u_modelMatrixLocation = glGetUniformLocation(shaderProgram, "u_modelMatrix");
	u_projMatrixLocation = glGetUniformLocation(shaderProgram, "u_projMatrix");
		///////////////////////NICK uniform var for light position

	u_lightLoc = glGetUniformLocation(shaderProgram, "u_lightPos");
	///////////////////////NICK
	//Always remember that it doesn't do much good if you don't have OpenGL actually use the shaders
	glUseProgram(shaderProgram);

	// Initialize Lighting
		///////////////////////NICK INITALIZE LIGHTING
	lights = glm::vec3(5.0,5.0,5.0);
	///////////////////////NICK END
}
/////////////////////NICK SET LIGHTS VALS
void MyGLWidget::setXLight(int x){
	lights.x= x;
	updateGL();
}
void MyGLWidget::setYLight(int x){
	lights.y= x;
	updateGL();
}
void MyGLWidget::setZLight(int x){
	lights.z= x;
	updateGL();
}

/////////////////////END NICK
//this is what i referred to as a "paint" or "draw" function in my lecture - Cory
void MyGLWidget::paintGL() {
	//Always and only do this at the start of a frame, it wipes the slate clean
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	//create an identity matrix for the model matrix
	
	float angle = 1;
	glm::vec3 rotAx= glm::vec3(0.0,1.0,0.0);
	glm::mat4 cam_coords = camera->getmat4();
	glUniformMatrix4fv(u_projMatrixLocation, 1, GL_FALSE, &cam_coords[0][0]);
	///////////////////////NICK  give light vals to opengl
	glUniform3f(u_lightLoc,lights.x,lights.y,lights.z);
	///////////////////////NICK END
	model = model;
	createCube(model);	
	for(int i = 0; i<myCube->edges.size(); i++){
		emit addEdge(myCube->edges[i], i);
	}
	for(int i = 0; i<myCube->faces.size(); i++){
		emit addFace(myCube->faces[i]);
	}
	for(int i = 0; i<myCube->vertices.size(); i++){
		emit addVertex(myCube->vertices[i]);
	}
	if(!hover){
	glLineWidth(2.5);
	glBegin(GL_LINES);
	E=glm::vec3(ex,ey,ez);
	R=E+100.0f*(Pw-E)/glm::length(Pw-E);
	glVertex3f(ex,ey,ez);
	glVertex3f(R[0],R[1],R[2]);
	//glVertex3f(Pw[0],Pw[1],Pw[2]);
	glEnd();
	}else{
		glLineWidth(0.001);
	}
	
	if(drawFFD) {
		for (int i = 0; i < ffd->BBcontrol_points.size(); i++ ) {
			MyVertex* v1 = ffd->BBcontrol_points[i][0];
			MyVertex* v2 = ffd->BBcontrol_points[i][1];
			glBegin(GL_LINES);
			glVertex3f(v1->X,v1->Y,v1->Z);
			glVertex3f(v2->X,v2->Y,v2->Z);
			glEnd();
		}
	}
}

void MyGLWidget::selectControlPoint() {
	if(ffd != nullptr) {
		if(!multiple_point_selection)	selected_points.clear();
		glm::vec3 ray = R - E;
		float dist = 10000;
		for( int i = 0; i < ffd->BBvertices.size(); i++ ) {
			glm::vec3 toPoint = glm::vec3(ffd->BBvertices[i]->X,ffd->BBvertices[i]->Y,ffd->BBvertices[i]->Z) - E;
			float angle = glm::acos(glm::dot(ray, toPoint)/(glm::length(ray)*glm::length(toPoint)));
			if(angle < 0.01f) {
				float distToPoint = glm::length(toPoint);
				if(distToPoint < dist) {
					dist = distToPoint;
					selected_points.push_back(ffd->BBvertices[i]);
				}
			}
		}
		//if(selected_points.size() != 0) cout << "selected point " << selected_points[selected_points.size() - 1]->ID << endl;
	}
}

void MyGLWidget::ffdInterpolate() {
	glm::vec3 P0 = glm::vec3(ffd->BBvertices[0]->X, ffd->BBvertices[0]->Y, ffd->BBvertices[0]->Z);
	glm::vec3 P1 = glm::vec3(ffd->BBvertices[ffd->BBvertices.size() - 1]->X, ffd->BBvertices[ffd->BBvertices.size() - 1]->Y, ffd->BBvertices[ffd->BBvertices.size() - 1]->Z);
	glm::vec3 S = glm::vec3(1,0,0);
	glm::vec3 T = glm::vec3(0,1,0);
	glm::vec3 U = glm::vec3(0,0,1);
	int l = ffdX - 1;
	int m = ffdY - 1;
	int n = ffdZ - 1;
	for ( int a = 0; a < ffd->BBvertices.size(); a++ ) {
		glm::vec3 Pijk = glm::vec3(ffd->BBvertices[a]->X, ffd->BBvertices[a]->Y, ffd->BBvertices[a]->Z);
		int i = (Pijk[0] - P0[0]) * l / glm::length(S);
		int j = (Pijk[1] - P0[1]) * m / glm::length(T);
		int k = (Pijk[2] - P0[2]) * n / glm::length(U);
		for(int b = 0; b < myCube->vertices.size(); b ++ ) {
			//float s = 0 + (myCube->vertices[b]->X - P0[0])/(P1[0] - P0[0]);
			//float t = 0 + (myCube->vertices[b]->Y - P0[1])/(P1[1] - P0[1]);
			//float u = 0 + (myCube->vertices[b]->Z - P0[2])/(P1[2] - P0[2]);
			float s = myCube->vertices[b]->X - P0[0];
			float t = myCube->vertices[b]->Y - P0[1];
			float u = myCube->vertices[b]->Z - P0[2];
			glm::vec3 sum1 = glm::vec3(0);
			for(int i = 0; i <= l; i++) {
				glm::vec3 sum2 = glm::vec3(0);
				for(int j = 0; j <= m; j++) {
					glm::vec3 sum3 = glm::vec3(0);
					for(int k = 0; k <= n; k++ ) {
						sum3 += glm::vec3(
							Pijk[0] * (glm::factorial(n)/glm::factorial(k)/glm::factorial(n-k)*
							glm::pow(1-u, n-k)*glm::pow(u,k)),
							Pijk[1] * (glm::factorial(n)/glm::factorial(k)/glm::factorial(n-k)*
							glm::pow(1-u, n-k)*glm::pow(u,k)),
							Pijk[2] * (glm::factorial(n)/glm::factorial(k)/glm::factorial(n-k)*
							glm::pow(1-u, n-k)*glm::pow(u,k)));  
					}
					sum2 += glm::vec3(
						sum3[0] * (glm::factorial(m)/glm::factorial(j)/glm::factorial(m-j)*
						glm::pow(1-t, m-j)*glm::pow(t,j)),
						sum3[1] * (glm::factorial(m)/glm::factorial(j)/glm::factorial(m-j)*
						glm::pow(1-t, m-j)*glm::pow(t,j)),
						sum3[2] * (glm::factorial(m)/glm::factorial(j)/glm::factorial(m-j)*
						glm::pow(1-t, m-j)*glm::pow(t,j)));  
				}
				sum1 += glm::vec3(
					sum2[0] * (glm::factorial(l)/glm::factorial(i)/glm::factorial(l-i)*
					glm::pow(1-s, l-i)*glm::pow(s,i)),
					sum2[1] * (glm::factorial(l)/glm::factorial(i)/glm::factorial(l-i)*
					glm::pow(1-s, l-i)*glm::pow(s,i)),
					sum2[2] * (glm::factorial(l)/glm::factorial(i)/glm::factorial(l-i)*
					glm::pow(1-s, l-i)*glm::pow(s,i)));  
			}
			cout << "vertex " << glm::pow(0,0) << " " << myCube->vertices[a]->ID << ": " << sum1[0] << " " << sum1[1] << " " << sum1[2] << endl;
			myCube->vertices[a]->X = sum1[0];
			myCube->vertices[a]->Y = sum1[1];
			myCube->vertices[a]->Z = sum1[2];
		}
	}
}

//void MyGlWidget::setSelectedEdge(QListWidgetItem* qwi){
//	MyHalfEdge = qwi;
//}
void MyGLWidget::splitQuad(){
	for(int i = 0; i<myCube->faces.size(); i++){
		int sideCt=0;
		if(myCube->faces[i]->isSelected()){
		//myCube->splitQuad(myCube->faces[i]);
			sideCt++;
		
		MyHalfEdge * startingHalfEdge=myCube->faces[i]->HalfEdge;
		MyHalfEdge * nxtHalfEdge = startingHalfEdge->NEXT;
		while(nxtHalfEdge != startingHalfEdge){
			sideCt++;
			nxtHalfEdge=nxtHalfEdge->NEXT;
		}
	
	if(sideCt==4){
	MyHalfEdge * HE0 = myCube->faces[i]->HalfEdge;
	MyFace * face2 = new MyFace(myCube->faceCt);
	myCube->faceCt++;
	face2->R=myCube->faces[i]->R;
	face2->G=myCube->faces[i]->G;
	face2->B=myCube->faces[i]->B;
	MyHalfEdge* HEL = new MyHalfEdge(myCube->edgeCt);
	myCube->edgeCt++;
	MyHalfEdge* HER = new MyHalfEdge(myCube->edgeCt);
	myCube->edgeCt++;
	HEL->F = myCube->faces[i];
	HER->F= face2;
	face2->HalfEdge=HER;
	HEL->SYM=HER;
	HER->SYM=HEL;
	HEL->V = HE0->NEXT->NEXT->V;
	HEL->NEXT = HE0->NEXT->NEXT->NEXT;
	HEL->PREV = HE0;
	HER->NEXT = HE0->NEXT;
	HER->NEXT->F = face2;
	HER->NEXT->NEXT->NEXT = HER;
	HER->PREV = HER->NEXT->NEXT;
	HER->NEXT->NEXT->F = face2;
	HE0->NEXT = HEL;
	HER->V = HE0->V;
	myCube->faces.push_back(face2);
	myCube->edges.push_back(HEL);
	myCube->edges.push_back(HER);
	}
		}
	}
	updateGL();
}
void MyGLWidget::setRed(int val){
	for(int i = 0; i<myCube->faces.size(); i++){
		if(myCube->faces[i]->isSelected()){
			
	float fval = val;
	float fvalAdjusted = val/100.0;
	myCube->faces[i]->R=fvalAdjusted;
		}
	}
	updateGL();
}
void MyGLWidget::setGreen(int val){
	for(int i = 0; i<myCube->faces.size(); i++){
		if(myCube->faces[i]->isSelected()){
			
	float fval = val;
	float fvalAdjusted = val/100.0;
	myCube->faces[i]->G=fvalAdjusted;
		}
	}
	updateGL();
}
void MyGLWidget::setBlue(int val){
	for(int i = 0; i<myCube->faces.size(); i++){
		if(myCube->faces[i]->isSelected()){
			
	float fval = val;
	float fvalAdjusted = val/100.0;
	myCube->faces[i]->B=fvalAdjusted;
		}
	}
	updateGL();
}
void MyGLWidget::setX(int val){
	if(drawFFD) {
		for(int i = 0; i < selected_points.size(); i++ ) {
			selected_points[i]->X +=  valX - val;
		}
		ffdInterpolate();
		valX = val;
	} else {
		for(int i = 0; i<myCube->vertices.size(); i++){
			if(myCube->vertices[i]->isSelected()){
			
		float fval = val;
		float fvalAdjusted = val;
		myCube->vertices[i]->X=fvalAdjusted;
			}
		}
	}
	updateGL();
}
void MyGLWidget::setY(int val){
	if(drawFFD) {
		for(int i = 0; i < selected_points.size(); i++ ) {
			selected_points[i]->Y +=  valY - val;
		}
		ffdInterpolate();
		valY = val;
	} else {
		for(int i = 0; i<myCube->vertices.size(); i++){
			if(myCube->vertices[i]->isSelected()){
			
		float fval = val;
		float fvalAdjusted = val;
		myCube->vertices[i]->Y=fvalAdjusted;
			}
		}
	}
	updateGL();
}
void MyGLWidget::setZ(int val){
	if(drawFFD) {
		for(int i = 0; i < selected_points.size(); i++ ) {
			selected_points[i]->Z +=  valZ - val;
		}
		ffdInterpolate();
		valZ = val;
	} else {
		for(int i = 0; i<myCube->vertices.size(); i++){
			if(myCube->vertices[i]->isSelected()){
			
		float fval = val;
		float fvalAdjusted = val;
		myCube->vertices[i]->Z=fvalAdjusted;
			}
		}
	}
	updateGL();
}

void MyGLWidget::checkForIntersection(){
	float tmin = -200;
	MyFace* sel = nullptr;
	for(int i = 0; i<myCube->faces.size(); i++){
		MyHalfEdge* E = myCube->faces[i]->HalfEdge;
		MyHalfEdge* En = E->NEXT;
		MyHalfEdge* Enn = En->NEXT;
		while(Enn!=E){
			MyVertex* vert=E->V;
			MyVertex* vertn=En->V;
			MyVertex* vertnn=Enn->V;
			glm::vec3 pt = glm::vec3(vert->X,vert->Y,vert->Z);
			glm::vec3 vecc1=glm::vec3(vertn->X-vert->X,vertn->Y-vert->Y,vertn->Z-vert->Z);
			glm::vec3 vecc2=glm::vec3(vertnn->X-vertn->X,vertnn->Y-vertn->Y,vertnn->Z-vertn->Z);
			glm::vec3 vecc3=glm::vec3(vert->X-vertnn->X,vert->Y-vertnn->Y,vert->Z-vertnn->Z);
			float sA = glm::length(vecc1);
			float sB = glm::length(vecc2);
			float sC = glm::length(vecc3);
			float S = (sA+sB+sC)/2.0;
			float T = glm::sqrt(S*(S-sA)*(S-sB)*(S-sC));
			glm::vec3 vecc1norm=glm::normalize(vecc1);
			glm::vec3 vecc2norm=glm::normalize(vecc2);
			glm::vec3 rd = glm::vec3(Pw.x-camera->eyePositionE.x,Pw.y-camera->eyePositionE.y,Pw.z-camera->eyePositionE.z);
			rd = glm::normalize(rd);
			glm::vec3 P2=glm::vec3(camera->eyePositionE.x+rd.x*100.0,camera->eyePositionE.y+rd.y*100.0,camera->eyePositionE.z+rd.z*100.0);
			glm::vec3 P1=glm::vec3(camera->eyePositionE.x,camera->eyePositionE.y,camera->eyePositionE.z);
			glm::vec3 V = P1-P2;
			if(vecc1norm!=vecc2norm){
				glm::vec3 N = glm::cross(vecc1norm, vecc2norm);
				t =(float) (glm::dot(N,(pt-P1)))/(glm::dot(N,(P1-P2)));
				glm::vec3 P = P1+t*V;
				//area of first subtriangle
				glm::vec3 veccP1=glm::vec3(P.x-vert->X,P.y-vert->Y,P.z-vert->Z);
				glm::vec3 veccP2=glm::vec3(vertn->X-P.x,vertn->Y-P.y,vertn->Z-P.z);
				glm::vec3 veccP3=glm::vec3(vertnn->X-P.x,vertnn->Y-P.y,vertnn->Z-P.z);
				float s1A = glm::length(veccP1);
				float s1B = glm::length(veccP2);
				float s1D = glm::length(veccP3);
				float s1C = sA;
			
				float s1 = (s1A+s1B+s1C)/2.0;
				float T1=glm::sqrt(s1*(s1-s1A)*(s1-s1B)*(s1-s1C));
				//area of second subtriangle
				float s2A = s1B;
				float s2B = s1D;
				float s2C = sB;
			
				float s2 = (s2A+s2B+s2C)/2.0;
				float T2=glm::sqrt(s2*(s2-s2A)*(s2-s2B)*(s2-s2C));
		
				//area of third subtriangle
				float s3A = s1D;
				float s3B = s1A;
				float s3C = sC;
			
				float s3 = (s3A+s3B+s3C)/2.0;
				float T3=glm::sqrt(s3*(s3-s3A)*(s3-s3B)*(s3-s3C));
				//
				float epsilon = .0001;

				if(glm::abs(T1+T2+T3-T)<epsilon){
					if(tmin<t){
						tmin=t;
						sel=myCube->faces[i];
					}
					
				}
			}
		 En = Enn;
		 Enn = Enn->NEXT;
		}
	}
	if(sel){
		
		if(hover){
			//sel->setSelected(true);
			sel->fHover=true;
		}else{
			if(!sel->isSelected()){
				sel->setSelected(true);
			}else{
				sel->setSelected(false);
			}
			sel->fHover=false;
		}
		for(int i = 0; i<myCube->faces.size(); i++){
			if(myCube->faces[i]!=sel){
				myCube->faces[i]->fHover=false;
			}
		}
	}
	highlight();
	
}

void MyGLWidget::drawRay(){
	checkForIntersection();
	ex=camera->eyePositionE.x;
	ey=camera->eyePositionE.y;
	ez=camera->eyePositionE.z;
	mouseX2=mouseX/this->width();
	mouseY2=1-mouseY/this->height();
	phi = glm::radians(camera->fovy/2.0);
	theta = glm::tan(phi)*1.2;
	A=glm::cross(camera->viewC-camera->eyePositionE,camera->upVectorU);
	B=glm::cross(A,camera->viewC-camera->eyePositionE);
	M=camera->eyePositionE+camera->viewC-camera->eyePositionE;
	H=(A*(theta)*glm::length(camera->viewC-camera->eyePositionE))/(glm::length(A));
	V=(B*(glm::tan(phi))*glm::length(camera->viewC-camera->eyePositionE))/(glm::length(B));
	float test = glm::dot(H,camera->viewC-camera->eyePositionE);
	Pw=M+(2*mouseX2-1)*H+(2*mouseY2-1)*V;
	updateGL();
}

void MyGLWidget::createCube(glm::mat4 model) {

	// See the art of comments? 
	// cube ///////////////////////////////////////////////////////////////////////
	//    v6----- v5
	//   /|      /|
	//  v1------v0|
	//  | |     | |
	//  | |v7---|-|v4
	//  |/      |/
	//  v2------v3	
	
// vertex coords array, remember the homogeneous representation?


	//float * vertices = myCube->getVertPoints().data();
	//
	//{1,1,1,1,  -1,1,1,1,  -1,-1,1,1,  1,-1,1,1,        // v0-v1-v2-v3
 //                       1,1,1,1,  1,-1,1,1,  1,-1,-1,1,  1,1,-1,1,        // v0-v3-v4-v5
 //                       1,1,1,1,  1,1,-1,1,  -1,1,-1,1,  -1,1,1,1,        // v0-v5-v6-v1
 //                       -1,1,1,1,  -1,1,-1,1,  -1,-1,-1,1,  -1,-1,1,1,    // v1-v6-v7-v2
 //                       -1,-1,-1,1,  1,-1,-1,1,  1,-1,1,1,  -1,-1,1,1,    // v7-v4-v3-v2
 //                       1,-1,-1,1,  -1,-1,-1,1,  -1,1,-1,1,  1,1,-1,1};   // v4-v7-v6-v5

	// normal array, normal is a vector which has the 4th value zero in homogeneous representation.
	//float  normals[] =
	//
	//{0,0,1,0,  0,0,1,0,  0,0,1,0,  0,0,1,0,             // v0-v1-v2-v3
 //                      1,0,0,0,  1,0,0,0,  1,0,0,0, 1,0,0,0,              // v0-v3-v4-v5
 //                      0,1,0,0,  0,1,0,0,  0,1,0,0, 0,1,0,0,              // v0-v5-v6-v1
 //                      -1,0,0,0,  -1,0,0,0, -1,0,0,0,  -1,0,0,0,          // v1-v6-v7-v2
 //                      0,-1,0,0,  0,-1,0,0,  0,-1,0,0,  0,-1,0,0,         // v7-v4-v3-v2
 //                      0,0,-1,0,  0,0,-1,0,  0,0,-1,0,  0,0,-1,0};        // v4-v7-v6-v5

	// color array, the 4th element is the alpha channel
	
	//
	//float  colors[] =
	//
	//{1,1,1,1,  1,1,0,1,  1,0,0,1,  1,0,1,1,              // v0-v1-v2-v3
 //                     1,1,1,1,  1,0,1,1,  0,0,1,1,  0,1,1,1,              // v0-v3-v4-v5
 //                     1,1,1,1,  0,1,1,1,  0,1,0,1,  1,1,0,1,              // v0-v5-v6-v1
 //                     1,1,0,1,  0,1,0,1,  0,0,0,1,  1,0,0,1,              // v1-v6-v7-v2
 //                     0,0,0,1,  0,0,1,1,  1,0,1,1,  1,0,0,1,              // v7-v4-v3-v2
 //                     0,0,1,1,  0,0,0,1,  0,1,0,1,  0,1,1,1};             // v4-v7-v6-v5

	//	// index array
	//unsigned short  indices[] =
	////
	//{0,1,2,  0,2,3,                             //front			
 //                               4,5,6,  4,6,7,                             //right
	//							8,9,10,  8,10,11,                          //top
	//							12,13,14,  12,14,15,                       //left
	//							16,17,18,  16,18,19,                       //bottom
	//							20,21,22,  20,22,23};                      //back
 //                               
	//now we put the data into the Vertex Buffer Object for the graphics system to use
	glBindBuffer(GL_ARRAY_BUFFER, vbo);

	glBufferData(GL_ARRAY_BUFFER, (myCube->getVertPoints().size()) * sizeof(float), myCube->getVertPoints().data(), GL_STATIC_DRAW); //the square vertices don't need to change, ever,
																				 //while the program runs

	glBindBuffer(GL_ARRAY_BUFFER, cbo);
	//always make sure you are telling OpenGL the right size to make the buffer, color data doesn't have as much data!
	glBufferData(GL_ARRAY_BUFFER,(myCube->getColorPoints().size()) * sizeof(float), myCube->getColorPoints().data(), GL_STATIC_DRAW);	

	glBindBuffer(GL_ARRAY_BUFFER, nbo);
	glBufferData(GL_ARRAY_BUFFER, (myCube->getNormPoints().size()) * sizeof(float), myCube->getNormPoints().data(), GL_STATIC_DRAW); //the square normals don't need to change, ever,
																				 //while the program runs
	//activate our three kinds of information
	glEnableVertexAttribArray(positionLocation);
	glEnableVertexAttribArray(colorLocation);
	glEnableVertexAttribArray(normalLocation);
	
	//we're using the vertex data first
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	//define how the vertex pointer should work, in our case we're accessing floats 4 at a time with no special pattern
	glVertexAttribPointer(positionLocation, 4, GL_FLOAT, 0, 0, static_cast<char*>(0));
	
	//now use color data
	glBindBuffer(GL_ARRAY_BUFFER, cbo);
	glVertexAttribPointer(colorLocation, 4, GL_FLOAT, 0, 0, static_cast<char*>(0));

	//one more time with the normals
	glBindBuffer(GL_ARRAY_BUFFER, nbo);
	glVertexAttribPointer(normalLocation, 4, GL_FLOAT, 0, 0, static_cast<char*>(0));
	
	//the last thing we need to do is setup our indices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,  myCube->getIndiciesPoints().size()* sizeof(unsigned short), myCube->getIndiciesPoints().data(), GL_STATIC_DRAW);

	//set the model uniform
	//GL_FALSE is used for not doing transpose operation, because glm has already provided us column major matrices.
	//if the matrices you used is row major, change this parameter to GL_TRUE.
	glUniformMatrix4fv(u_modelMatrixLocation, 1, GL_FALSE, &model[0][0]);

	//draw the elements
	glDrawElements(GL_TRIANGLES, myCube->getIndiciesPoints().size(), GL_UNSIGNED_SHORT, 0);
	
	//shut off the information since we're done drawing
	glDisableVertexAttribArray(positionLocation);
	glDisableVertexAttribArray(colorLocation);
}

//This function is called automatically when the widget is resized, including the first "sizing"
void MyGLWidget::resizeGL(int width, int height) {
    //set the viewport, more boilerplate
	glViewport(0, 0, width, height);

	// The current view matrix is calculated by hand/magic... you should come up with your own method to get the view matrix.
	// be ware that those glm matrices are all COLUMN MAJOR.
	glm::mat4 view = glm::mat4(1.015, -0.573, -0.533, -0.530,
		                       0.000, 1.469, -0.533,  -0.530,
							   -0.812, -0.717, -0.667, -0.662,
							   0.000, 0.000, 7.400, 7.550);

	//set the projection matrix here, it only needs to be changed if the screen is resized otherwise it can stay the same
	glUniformMatrix4fv(u_projMatrixLocation, 1, GL_FALSE, &view[0][0]);
}

void MyGLWidget::wheelEvent(QWheelEvent *e){
		//cout<<"art"<<endl;
	if(e->delta()>0){
		camera->setZ(1.0);
	}
	if(e->delta()<0){
		camera->setZ(-1.0);
	}
	updateGL();
}
 
void MyGLWidget::mouseMoveEvent(QMouseEvent *e){
	if(e->buttons() == Qt::LeftButton) {
		if(e->pos().x()-mouseX>0){
			camera->rotateY(5.0);
			mouseX = e->pos().x();
		}
		if(e->pos().x()-mouseX<0){
			camera->rotateY(-5.0);
			mouseX = e->pos().x();
		}
		if(e->pos().y()-mouseY>0){
			camera->rotateDn(5.0);
			mouseY = e->pos().y();
		}
		if(e->pos().y()-mouseY<0){
			camera->rotateDn(-5.0);
			mouseY = e->pos().y();
		}
	} else if (e->buttons() == Qt::RightButton) {
		if(e->pos().y()-mouseY>0){
			camera->setZ(0.5);
			mouseY = e->pos().y();
		}
		if(e->pos().y()-mouseY<0){
			camera->setZ(-0.5);
			mouseY = e->pos().y();
		}
	}
	hover=true;
	drawRay();
	updateGL();
}
void MyGLWidget::mousePressEvent(QMouseEvent *e){
	hover=false;
	mouseY = e->pos().y();
	mouseX = e->pos().x();
		drawRay();
		selectControlPoint(); // Anton
	updateGL();
	
}

//////////Anton
void MyGLWidget::keyReleaseEvent(QKeyEvent *e) {
	if(e->key() == Qt::Key_Shift) {
		this->multiple_point_selection = false;
	}
}

/////////////////

void MyGLWidget::keyPressEvent(QKeyEvent *e){
	//////////////// Anton
	if(e->key() == Qt::Key_Shift) {
		this->multiple_point_selection = true;
	}

	/////////////////////

	if(e->key() == Qt::Key_Down){
		
		camera->rotateDn(5.0);
		//cout<<"art"<<endl;
	}
	if(e->key() == Qt::Key_Up){
		
		camera->rotateDn(-5.0);
		//cout<<"art"<<endl;
	}
	if(e->key() == Qt::Key_Left){
		
		camera->rotateY(-5.0);
		//cout<<"art"<<endl;
	}
	if(e->key() == Qt::Key_Right){
		
		camera->rotateY(5.0);
		//cout<<"art"<<endl;
	}
	if(e->key() == Qt::Key_Right){
		
		camera->rotateY(5.0);
		//cout<<"art"<<endl;
	}
	if(e->key() == Qt::Key_Plus){
		
		camera->setZ(0.1);
		updateGL();
	//	cout<<"art"<<endl;
	}
		if(e->key() == Qt::Key_Minus){
		
		camera->setZ(-0.1);
				updateGL();
		//cout<<"art"<<endl;
	}
		updateGL();
}

//from swiftless.com
char* MyGLWidget::textFileRead(const char* fileName) {
    char* text;
    
    if (fileName != NULL) {
        FILE *file = fopen(fileName, "rt");
        
        if (file != NULL) {
            fseek(file, 0, SEEK_END);
            int count = ftell(file);
            rewind(file);
            
            if (count > 0) {
                text = (char*)malloc(sizeof(char) * (count + 1));
                count = fread(text, sizeof(char), count, file);
                text[count] = '\0';	//cap off the string with a terminal symbol, fixed by Cory
            }
            fclose(file);
        }
    }
    return text;
}

void MyGLWidget::printLinkInfoLog(int prog) 
{
	int infoLogLen = 0;
	int charsWritten = 0;
	GLchar *infoLog;

	glGetProgramiv(prog, GL_INFO_LOG_LENGTH, &infoLogLen);

	// should additionally check for OpenGL errors here

	if (infoLogLen > 0)
	{
		infoLog = new GLchar[infoLogLen];
		// error check for fail to allocate memory omitted
		glGetProgramInfoLog(prog,infoLogLen, &charsWritten, infoLog);
		cerr << "InfoLog:" << endl << infoLog << endl;
		delete [] infoLog;
	}
}
void MyGLWidget::addVertToEdge(){
	for(int i = 0; i<myCube->edges.size(); i++){
		if(myCube->edges[i]->isSelected()){
			MyHalfEdge *HE0=myCube->edges[i];
			MyVertex * VN = new MyVertex(1,1,1,myCube->vertCt);
			myCube->vertCt++;
			MyHalfEdge *HE1 = HE0->NEXT;
			MyHalfEdge *HE2 = HE1-> SYM;
			MyHalfEdge *HENL = new MyHalfEdge(HE0->F,VN ); //HE New Left//
			HENL->ID= myCube->edgeCt;
			myCube->edgeCt++;
			MyHalfEdge *HENR = new MyHalfEdge(HE2->F,VN);
			HENR->ID= myCube->edgeCt;
			myCube->edgeCt++;
			HENL->NEXT = HE1;
			HE0->NEXT = HENL;
			HENR->NEXT = HE2->NEXT;
			HE2->NEXT = HENR;
			HENL->SYM = HENR;
			HENR->SYM= HENL;
			HENL->F = HE0->F;
			HENR->F = HE2->F;
			HENL->V = VN;
			HENR-> V = HE2->V;
			HE2->V = VN;
			VN->X=(((HE0->V->X+HE1->V->X)/2.0));
			VN->Y=(((HE0->V->Y+HE1->V->Y)/2.0));
			VN->Z=(((HE0->V->Z+HE1->V->Z)/2.0));
			myCube->vertices.push_back(VN);
			myCube->edges.push_back(HENL);
				myCube->edges.push_back(HENR);
		}
	}
	updateGL();
}
void MyGLWidget::addEdgeBtwnFaces(){
	int selectedCt = 0;
	bool adj = false;
	MyFace* FA= new MyFace(-1);
	
	MyFace* FB;
	for(int i = 0; i<myCube->faces.size(); i++){
		if(myCube->faces[i]->isSelected()){
			selectedCt++;
			if(FA->ID==-1){
				FA=myCube->faces[i];
			}else{
				FB = myCube->faces[i];
			}
		}
	}
	if(selectedCt==2){
		MyHalfEdge* HEAfst = FA->HalfEdge;
		MyHalfEdge* HEAsnd = FB->HalfEdge;
		if(HEAfst->V==HEAsnd->V){
			adj=true;
		}
		MyHalfEdge* HEAfst2 = HEAfst->NEXT;
		MyHalfEdge* HEAsnd2 = HEAsnd->NEXT;
		while(HEAfst !=HEAfst2){
			while(HEAsnd2 != HEAsnd){
				if(HEAsnd2->V==HEAfst2->V ||HEAfst->V==HEAsnd2->V||HEAsnd->V==HEAfst2->V){
					adj=true;
				}
				HEAsnd2= HEAsnd2->NEXT;
			}

			HEAfst2=HEAfst2->NEXT;
		}
		if(adj){
			MyVertex *V1 = new MyVertex(FA->HalfEdge->V->X, FA->HalfEdge->V->Y, FA->HalfEdge->V->Z, myCube->vertCt);
			myCube->vertCt++;
			MyHalfEdge *HENL = new MyHalfEdge(myCube->edgeCt);
			myCube->edgeCt++;
    MyHalfEdge *HENR = new MyHalfEdge(myCube->edgeCt);
	myCube->edgeCt++;
    HENL->NEXT=FA->HalfEdge->NEXT;
    FA->HalfEdge->NEXT=HENL;
    HENL->V=V1;
    HENL->F=FA->HalfEdge->F;
     HENL->SYM=HENR;
    HENR->NEXT=FB->HalfEdge->NEXT;
    FB->HalfEdge->NEXT=HENR;
    HENR->V=FA->HalfEdge->V;
    FB->HalfEdge->V=V1; 
    HENR->F=FB->HalfEdge->F;
     HENR->SYM=HENL;
    MyHalfEdge *heTEMP = HENL->NEXT->SYM;
    while (heTEMP->F != HENR->F) {
        heTEMP->V=V1;
        heTEMP = heTEMP->NEXT->SYM;
     }
	 myCube->vertices.push_back(V1);
	 myCube->edges.push_back(HENL);
   myCube->edges.push_back(HENR);
		}
	}
	updateGL();
}

void MyGLWidget::deleteVertex(){
	for(int i = 0; i<myCube->edges.size(); i++){
		if(myCube->edges[i]->isSelected()){
			
			std::vector<MyHalfEdge*> edgesToDel;
			std::vector<MyHalfEdge*> edgesToPut;
			std::vector<MyFace*> facesToDel;
			std::vector<MyVertex*> vertsToDel;
				std::vector<MyVertex*> vertsToPut;
				std::vector<MyVertex*> vertsToPutFin;
			MyHalfEdge* cEdge = myCube->edges[i];
			MyVertex* cVert = cEdge->V;
			for(int j = 0; j<myCube->edges.size(); j++){
				if(myCube->edges[j]->V==cVert){
				
					edgesToDel.push_back(myCube->edges[j]);
					
					MyHalfEdge* nEdge = myCube->edges[j];
					MyHalfEdge* nNext = nEdge->NEXT;
					while(nEdge != nNext){
						edgesToDel.push_back(nNext);
						nNext=nNext->NEXT;
					}
				}
			}
			for(int ii = 0; ii<myCube->edges.size(); ii++){
				bool has = true;
				for(int jj = 0; jj<edgesToDel.size(); jj++){
					if(myCube->edges[ii]==edgesToDel[jj]){
						has=false;
					}
				}
				if(has){
					edgesToPut.push_back(myCube->edges[ii]);
				}
			}
			for(int x = 0; x<myCube->faces.size(); x++){
				for(int y=0; y<edgesToPut.size(); y++){
					
					if(edgesToPut[y]->F==myCube->faces[x]){
						facesToDel.push_back(myCube->faces[x]);
					}
				}
			}
			
			vertsToDel.push_back(cVert);
			for(int kk = 0; kk<myCube->vertices.size(); kk++){
				bool has = true;
				for(int ll = 0; ll<vertsToDel.size(); ll++){
					if(myCube->vertices[kk]==vertsToDel[ll]){
						has=false;
					}
				}
				if(has){
					vertsToPut.push_back(myCube->vertices[kk]);
				}
			}
			for(int zzz = 0; zzz<vertsToPut.size(); zzz++){
				bool empty=true;
				for(int iii = 0; iii<edgesToPut.size(); iii++){
					if(edgesToPut[iii]->V==vertsToPut[zzz]){
						empty=false;
					}
				}
				if(!empty){
					vertsToPutFin.push_back(vertsToPut[zzz]);
				}
			}
			emit clearzz();
			QCoreApplication::processEvents();
				for(int i = 0; i<edgesToPut.size(); i++){
					emit addEdge(edgesToPut[i], i);
				}
				for(int p = 0; p<facesToDel.size(); p++){
					emit addFace(facesToDel[p]);
				}
				for(int b = 0; b<vertsToPutFin.size(); b++){
					emit addVertex(vertsToPutFin[b]);
				}
			myCube->edges=edgesToPut;
			myCube->faces=facesToDel;
			myCube->vertices=vertsToPutFin;
		}
	}
	updateGL();
}

void MyGLWidget::highlight(){
	for(int i = 0; i<myCube->faces.size(); i++){
		if(myCube->faces[i]->isSelected()){
			myCube->faces[i]->high=true;
		}else{
			myCube->faces[i]->high=false;
		}
	}
	updateGL();
}

void MyGLWidget::printShaderInfoLog(int shader)
{
	int infoLogLen = 0;
	int charsWritten = 0;
	GLchar *infoLog;

	glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLogLen);

	// should additionally check for OpenGL errors here

	if (infoLogLen > 0)
	{
		infoLog = new GLchar[infoLogLen];
		// error check for fail to allocate memory omitted
		glGetShaderInfoLog(shader,infoLogLen, &charsWritten, infoLog);
		cerr << "InfoLog:" << endl << infoLog << endl;
		delete [] infoLog;
	}

	
}

void MyGLWidget::changeFFDX(int i) {
	ffdX = i;
}

void MyGLWidget::changeFFDY(int i) {
	ffdY = i;
}

void MyGLWidget::changeFFDZ(int i) {
	ffdZ = i;
}

void MyGLWidget::createFFD() {
	ffd = new MyFFDGrid(ffdX, ffdY, ffdZ, myCube->vertices);
	drawFFD = !drawFFD;
}

//////////////Smooth//////////////////

void MyGLWidget::startSmooth() {
	smooth(myCube);
}

void MyGLWidget::smooth(MyUnitCube* m) {
	std::vector<MyFace*> fcs = m->faces;
	for (int i = 0; i < fcs.size(); i++ ) {
		MyVertex* centroid = new MyVertex();
		std::vector<MyVertex*> centre = *new std::vector<MyVertex*>();
		MyHalfEdge* hl1 = fcs[i]->HalfEdge;
		MyHalfEdge* hl2 = hl1;
		do {
			MyVertex* smth = hl2->V;
			centre.push_back(smth);
			hl2 = hl2->NEXT;
		} while (hl2 != hl1);

		centroid->ID = m->vertices[m->vertices.size()-1]->ID + 1;///better change to the face id!!!!!
		for (int j = 0; j < centre.size(); j ++) {
			centroid->X = (centroid->X + centre[j]->X);
			centroid->Y = (centroid->Y + centre[j]->Y);
			centroid->Z = (centroid->Z + centre[j]->Z);
		}
		centroid->X = (centroid->X)/centre.size();
		centroid->Y = (centroid->Y)/centre.size();
		centroid->Z = (centroid->Z)/centre.size();

		std::cout << fcs[i]->ID << ", " << centroid->X << " " << centroid->Y << " " << centroid->Z << " " << std::endl;
	}

	emit sendSmooth();
}